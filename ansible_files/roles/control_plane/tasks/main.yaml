---
- name: change the hostname to master
  shell: hostnamectl set-hostname master

- name: update packages
  shell: sudo apt update

- name: create keys to make ssh 
  shell: >
    ssh-keygen -q -b 2048 -t rsa -N "" -f ~/.ssh/id_rsa

- name: br filter
  shell:
    cmd: |
      cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
      overlay
      br_netfilter
      EOF
      sudo modprobe overlay
      sudo modprobe br_netfilter
      cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
      EOF
      sudo sysctl --system

- name: Install container Runtimes
  shell:
    cmd: |
      OS=xUbuntu_22.04
      CRIO_VERSION=1.23
      echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /"|sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
      echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$CRIO_VERSION/$OS/ /"|sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$CRIO_VERSION.list
      curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$CRIO_VERSION/$OS/Release.key | sudo apt-key add -
      curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | sudo apt-key add -

- name: run crio and dependencies
  shell:
    cmd: |
      sudo apt update
      sudo apt install cri-o cri-o-runc -y
      sudo systemctl enable crio.service
      sudo systemctl start crio.service
      sudo apt install cri-tools

- name: Install Kubeadm kubelet and kubectl
  shell:
    cmd: |
      sudo apt-get update
      sudo apt-get install -y apt-transport-https ca-certificates curl
      sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
      echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
      sudo apt-get update
      sudo apt-get install -y kubelet kubeadm kubectl
      sudo apt-mark hold kubelet kubeadm kubectl

- name: Init Kubeadm
  shell:
    cmd: |
      kubeadm init

- name: operations on config file
  shell:
    cmd: |
      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube/config
      export KUBECONFIG=$HOME/.kube/config

- name: Install weave network pods
  shell:
    cmd: |
      kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

- name: Token Generate
  shell:
    cmd: |
      kubeadm token create --print-join-command > /tmp/tokenfile.sh
  
- name: Download the token file to the local machine
  fetch:
    src: /tmp/tokenfile.sh
    dest: ./
    flat: yes

- name: Download the kube-config file for Github actions
  fetch: 
    src: $HOME/.kube/config
    dest: ./
    flat: yes

- name: make the cluster public for github actions
  shell:
    cmd: |
      kubectl -n kube-system get configmap kubeadm-config -o jsonpath='{.data.ClusterConfiguration}' > kubeadm_temp1.yaml
      awk 'NR==2{print "  \certSANs:"}1' kubeadm_temp1.yaml > kubeadm_temp2.yaml
      ip_content="$(curl http://169.254.169.254/latest/meta-data/public-ipv4)"
      MYCUSTOMTAB='  '
      ip=$(echo "   - \"${ip_content}\"")
      awk -v awkvar="$ip" 'NR==3{print awkvar; }'1 kubeadm_temp2.yaml > kubeadm.yaml
      rm -rf kubeadm_temp1.yaml
      rm -rf kubeadm_temp2.yaml

- name: regenarate the certs
  shell:
    cmd: |
      sudo mv /etc/kubernetes/pki/apiserver.crt ~
      sudo mv /etc/kubernetes/pki/apiserver.key ~
      sudo kubeadm init phase certs apiserver --config kubeadm.yaml

- name: restart the api server
  shell:
    cmd: |
      apiserver="$(crictl ps | grep -i kube-apiserver| grep -v pause | awk '{print $1}')"
      crictl stop "${apiserver}"

- name: change the server addres from private to public
  shell:
    cmd: |
      mv $HOME/.kube/config $HOME/.kube/config_backup 
      pri_ip="$(curl http://169.254.169.254/latest/meta-data/local-ipv4)"
      pub_ip="$(curl http://169.254.169.254/latest/meta-data/public-ipv4)"
      awk '{gsub("'"$pri_ip"'","'"$pub_ip"'"); print}' $HOME/.kube/config_backup > $HOME/.kube/config

- name: download the public key from master
  fetch:
    src: ~/.ssh/id_rsa.pub
    dest: ./
    flat: yes

